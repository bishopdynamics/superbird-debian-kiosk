#!/usr/bin/env bash

# update scripts and service files on a locally attached device
#   will not overwrite any existing buttons_settings.py or browser_settings.sh
#   will not overwrite xorg.conf
#   will not overwrite vnc_passwd
#   this is intended to run on the host device, and expects key-based ssh authentication has already been setup with superbird
# shellcheck disable=SC2029

set -e

# all config lives in image_config.sh
source ./image_config.sh

#### Functions

deploy_service() {
    # copy given service file and restart that service
    SVC_NAME="$1"
    echo "deploying $SVC_NAME"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo touch /lib/systemd/system/$SVC_NAME"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo chown ${USER_NAME} /lib/systemd/system/$SVC_NAME"
    scp "./files/data/lib/systemd/system/$SVC_NAME" "${USER_NAME}@${HOST_NAME}":/lib/systemd/system/
    ssh "${USER_NAME}@${HOST_NAME}" "sudo systemctl restart $SVC_NAME" >/dev/null 2>&1
    ssh "${USER_NAME}@${HOST_NAME}" "sudo ln -sf /lib/systemd/system/$SVC_NAME /etc/systemd/system/multi-user.target.wants/$SVC_NAME"
}

deploy_script() {
    # copy given script file
    #   does not change file mode, presumes new file is correct mode already
    SCR_NAME="$1"
    scp "./files/data/scripts/$SCR_NAME" "${USER_NAME}@${HOST_NAME}":/scripts/
}

deploy_script_if_missing() {
    # deploy script only if it is missing
    #   does not change file mode, presumes new file is correct mode already
    SCR_NAME="$1"

    SCR_MISSING=$(ssh "${USER_NAME}@${HOST_NAME}" "if [ ! -f /scripts/$SCR_NAME ]; then echo missing; fi")
    if [ "$SCR_MISSING" == "missing" ]; then
        deploy_script "$SCR_NAME"
    fi
}

#### Entrypoint

echo ""
echo "Upgrading locally connected device"
echo ""

# install required python packages via pip
ssh "${USER_NAME}@${HOST_NAME}" "sudo chown -R ${USER_NAME} /scripts"
deploy_script requirements.txt
ssh "${USER_NAME}@${HOST_NAME}" "sudo python3 -m pip install -r /scripts/requirements.txt --break-system-packages"

echo ""
echo "Deploying scripts and services"

# Now deploy scripts and services

# deploy inittab and fstab
scp "./files/data/etc/inittab" "${USER_NAME}@${HOST_NAME}":/tmp/inittab
ssh "${USER_NAME}@${HOST_NAME}" "sudo mv /tmp/inittab /etc/inittab"

scp "./files/data/etc/fstab" "${USER_NAME}@${HOST_NAME}":/tmp/fstab
ssh "${USER_NAME}@${HOST_NAME}" "sudo mv /tmp/fstab /etc/fstab"

# check if /dev/settings is mounted, if not then format settings, and mount it (restart browser)
CFG_MISSING=$(ssh "${USER_NAME}@${HOST_NAME}" " mount |grep -q /dev/settings || echo missing")
if [ "$CFG_MISSING" == "missing" ]; then
    echo "Migrating browser profile at /config to use settings partition"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo systemctl stop browser"  # dont need to start it, will get restarted when re-deployed later
    ssh "${USER_NAME}@${HOST_NAME}" "sudo umount /config"  # just in case
    ssh "${USER_NAME}@${HOST_NAME}" "sudo rm -r /config"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo mkfs.ext4 -F /dev/settings"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo mkdir /config"
    ssh "${USER_NAME}@${HOST_NAME}" "sudo mount /config"
fi


deploy_script_if_missing buttons_settings.py
deploy_script_if_missing browser_settings.sh
deploy_script_if_missing vnc_passwd

deploy_script buttons_app.py
deploy_script clear_display.sh
deploy_script setup_backlight.sh
deploy_script setup_display.sh
deploy_script setup_usbgadget.sh
deploy_script setup_vnc.sh
deploy_script start_buttons.sh
deploy_script start_browser.sh


echo ""
echo "Deploying services, You can ignore the warnings about reloading units"
echo ""

deploy_service backlight.service
deploy_service buttons.service
deploy_service browser.service
deploy_service vnc.service


echo "Generating /etc/hosts"
HOSTS_CONTENT=$(
	cat <<- EOHF
	# generated by $0
	127.0.0.1     localhost
	127.0.0.1     $HOST_NAME
	::1           localhost $HOST_NAME ip6-localhost ip6-loopback
	ff02::1	      ip6-allnodes
	ff02::2       ip6-allrouters
	${USBNET_PREFIX}.1   host
	EOHF
)
echo "$HOSTS_CONTENT" > /tmp/hosts
scp /tmp/hosts "${USER_NAME}@${HOST_NAME}":/tmp/hosts
ssh "${USER_NAME}@${HOST_NAME}" "sudo cp /tmp/hosts /etc/hosts"
rm /tmp/hosts

deploy_service usbgadget.service

echo ""
echo "Done deploying to device"
echo ""
